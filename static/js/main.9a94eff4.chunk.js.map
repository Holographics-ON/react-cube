{"version":3,"sources":["components/Button.js","components/Canvas.js","App.js","index.js"],"names":["ClickButton","props","className","type","onClick","e","target","innerText","name","Canvas","colour","refContainer","useRef","useEffect","scene","THREE","camera","window","innerWidth","innerHeight","renderer","alpha","setSize","current","appendChild","domElement","geometry","material","color","cube","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","ref","App","useState","setColour","setName","placeholder","onChange","value","ReactDOM","StrictMode","document","getElementById"],"mappings":"qMAGaA,G,KAAc,SAACC,GAMxB,OACI,8BAGI,yBAAQC,UAAW,SAAUC,KAAK,SAASC,QARnD,SAAqBC,GACjBJ,EAAMG,QAAQC,EAAEC,OAAOC,YAOnB,cAAmEN,EAAMO,Y,OCVxEC,EAAS,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACdC,EAAeC,iBAAO,MAgC5B,OA/BAC,qBAAU,WACN,IAAIC,EAAQ,IAAIC,IACZC,EAAS,IAAID,IACb,GACAE,OAAOC,WAAaD,OAAOE,YAC3B,GACA,KAEAC,EAAW,IAAIL,IAAoB,CAACM,OAAM,IAC9CD,EAASE,QAAQL,OAAOC,WAAYD,OAAOE,aAC3CR,EAAaY,QAAQC,YAAYJ,EAASK,YAE1C,IAAIC,EAAW,IAAIX,IACfY,EAAW,IAAIZ,IAAwB,CAACa,MAAOlB,IAC/CmB,EAAO,IAAId,IAAWW,EAAUC,GACpCb,EAAMgB,IAAID,GAGVb,EAAOe,SAASC,EAAI,GAEN,SAAVC,IACAC,sBAAsBD,GAEtBJ,EAAKM,SAASC,GAAK,IACnBP,EAAKM,SAASE,GAAK,IAEnBjB,EAASkB,OAAOxB,EAAOE,GAE3BiB,KACF,CAACvB,IAIH,qBAAM6B,IAAK5B,KCGA6B,MAnCf,WAAgB,IAAD,EACgBC,mBAAS,OADzB,mBACN/B,EADM,KACEgC,EADF,OAEYD,mBAAS,IAFrB,mBAENjC,EAFM,KAEAmC,EAFA,KAMb,OACE,sBAAKzC,UAAU,MAAf,UACE,yCAAYM,KACZ,sHACA,iDAAoBE,EAApB,oBACA,sBACA,uBAAOkC,YAAY,OAAOC,SAT9B,SAAsBxC,GACpBsC,EAAQtC,EAAEC,OAAOwC,UAUf,sBAAK5C,UAAW,UAAhB,UAEM,cAAC,EAAD,CAAaM,KAAK,MAAMJ,QAAS,SAAA0C,GAAK,OAAIJ,EAAUI,MACpD,cAAC,EAAD,CAAatC,KAAK,SAASJ,QAAS,SAAA0C,GAAK,OAAIJ,EAAUI,MACvD,cAAC,EAAD,CAAatC,KAAK,OAAOJ,QAAS,SAAA0C,GAAK,OAAIJ,EAAUI,MACrD,cAAC,EAAD,CAAatC,KAAK,QAAQJ,QAAS,SAAA0C,GAAK,OAAIJ,EAAUI,MACtD,cAAC,EAAD,CAAatC,KAAK,OAAOJ,QAAS,SAAA0C,GAAK,OAAIJ,EAAUI,MACrD,cAAC,EAAD,CAAatC,KAAK,OAAOJ,QAAS,SAAA0C,GAAK,OAAIJ,EAAUI,MACrD,cAAC,EAAD,CAAatC,KAAK,SAASJ,QAAS,SAAA0C,GAAK,OAAIJ,EAAUI,SAO3D,cAAC,EAAD,CAAQpC,OAAQA,QC9BxBqC,IAAST,OACP,cAAC,IAAMU,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.9a94eff4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\nexport const ClickButton = (props) => {\n\n    function handleClick(e){\n        props.onClick(e.target.innerText)\n    }\n\n    return (\n        <div>\n           \n            {/* <button onClick={()=> setCount(count + 1)}> {props.name}</button> */}\n            <button className={\"button\"} type=\"button\" onClick={handleClick}> {props.name}</button>\n        </div>\n            \n    );\n}\n","import React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\n\nexport const Canvas = ({colour}) => {\n    const refContainer = useRef(null);\n    useEffect(() => {\n        let scene = new THREE.Scene();\n        let camera = new THREE.PerspectiveCamera(\n            45,\n            window.innerWidth / window.innerHeight,\n            0.1,\n            1000\n        );\n        let renderer = new THREE.WebGLRenderer({alpha:true});\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        refContainer.current.appendChild(renderer.domElement);\n\n        let geometry = new THREE.BoxGeometry();\n        let material = new THREE.MeshBasicMaterial({color: colour});\n        let cube = new THREE.Mesh(geometry, material);\n        scene.add(cube);\n    \n\n        camera.position.z = 5;\n\n        let animate = function () {\n            requestAnimationFrame(animate);\n\n            cube.rotation.x += 0.01;\n            cube.rotation.y += 0.01;\n\n            renderer.render(scene, camera);\n        };\n        animate();\n    },[colour]);\n    \n    return (\n    \n    <div  ref={refContainer}></div>\n    )\n};\n","import React, {useState} from \"react\";\nimport './App.css';\nimport {ClickButton} from './components/Button';\nimport {Canvas} from './components/Canvas';\n\n\nfunction App() {\n  const [colour, setColour ] = useState('red')\n  const [name, setName ] = useState('')\n  function handleChange(e){\n    setName(e.target.value)\n  }\n  return (\n    <div className=\"App\">\n      <h1> Hello {name}</h1>\n      <p>Welcome to the cube generator ! Change the colour of the cube by pressing the buttons</p> \n      <p> You've added a {colour} to the cube!!</p>\n      <p></p>\n      <input placeholder=\"name\" onChange={handleChange} />\n           \n      <div className={\"buttons\"}>\n           \n            <ClickButton name=\"red\" onClick={value => setColour(value)}/>\n            <ClickButton name=\"orange\" onClick={value => setColour(value)} />\n            <ClickButton name=\"lime\" onClick={value => setColour(value)} />\n            <ClickButton name=\"green\" onClick={value => setColour(value)}/>\n            <ClickButton name=\"aqua\" onClick={value => setColour(value)} />\n            <ClickButton name=\"blue\" onClick={value => setColour(value)}/>\n            <ClickButton name=\"purple\" onClick={value => setColour(value)}/>\n\n    \n\n\n           \n        </div>\n        <Canvas colour={colour}/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}